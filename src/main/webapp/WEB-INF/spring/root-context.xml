<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:property-placeholder
		location="classpath:db.properties, classpath:email.properties" />


	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 객체 선언: 자동 생성 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- 바로 오라클로 가는 거 기본 타입 -->
		<!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" 
			/> -->
		<!-- <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl" 
			/> -->
		<property name="driverClassName"
			value="${db.driverclassname}" />
		<!-- DB 접속 정보를 설치한 것에 맞게 변경해 줘야 한다. -> 만약에 11g xe를 설치한 경우 -->
		<property name="jdbcUrl" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- <property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:orcl" 
			/> <property name="username" value="c##java09" /> <property name="password" 
			value="java09" /> -->

		<!-- ip는 DBMS가 설치되어 있는 PC의 IP를 의미하며 아래와 같이 표현이 가능. ex) jdbc:oracle:thin:@127.0.0.1:1521:xe 
			jdbc:oracle:thin:@localhost:1521:xe -->

	</bean>

	<!-- 서버가 시작되면 Connection을 만들어서 DBCP에 넣어둔다. 속도 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- Mybaits - dao 코드 자동 생성 -->
	<!-- mapper Interface(메서드이름) - mapper xml(sql) -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations"
			value="classpath:com/jds/web/mapper/*.xml"></property>
		<!-- <property name="mapperLocations"> <list> <value>classpath:com/jds/web/mapper/*.xml</value> 
			</list> </property> -->
	</bean>

	<!-- SqlSessionTemplate -->
	<bean id="sqlSessoinTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory" />
	</bean>

	<!-- 트랜잭션 처리를 할때 transactionManager라는 태그를 만들 예정 -->
	<!-- 트랜잭션 어노테이션을 처리해주는 코드 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<!-- transactionManager는 DataSourceTransactionManager라는 클래스를 지정 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- dao(persitence) 자동으로 만들어 주기 위한 위치 -->
	<mybatis-spring:scan base-package="com.jds.web" />

	<context:component-scan
		base-package="com.jds.web">
	</context:component-scan>

	<!-- <context:component-scan base-package="com.jds.web" use-default-filters="false"> 
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" 
		/> </context:component-scan> -->

	<!-- 이메일 인증 관련 -->
	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}" />
		<property name="port" value="${email.port}" />
		<property name="username" value="${email.username}" />
		<property name="password" value="${email.password}" />
		<property name="defaultEncoding" value="${email.defaultEncoding}"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">${email.protocol}</prop>
				<prop key="mail.smtp.auth">${email.auth}</prop>
				<prop key="mail.smtp.starttls.enable">${email.enable}</prop>
				<prop key="mail.debug">${email.debug}</prop>
			</props>
		</property>
	</bean>
</beans>
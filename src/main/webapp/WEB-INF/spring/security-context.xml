<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:annotation-config />
	<context:property-placeholder
		location="classpath:db.properties" />

	<security:http use-expressions="true"
		authentication-manager-ref="normal">
		<!-- <security:intercept-url pattern="/" requires-channel="https" access="permitAll"/> -->
		<!-- 로그인 폼 -->
		<!-- login-page="/로그인 페이지 url" username-parameter="유저 아이디" password-parameter="유저 
			패스워드" login-processing-url="/로그인 체크 url" authentication-failure-handler-ref="로그인 
			실패시 처리할 코드" authentication-success-handler-ref="로그인 성공시 처리할 코드" -->
			
		<security:intercept-url pattern="/portfolio/userPofolList"
			access="permitAll"/>
		<security:intercept-url pattern="/portfolio/write"
			access="hasAnyRole('ROLE_USER', 'ROLE_OPER', 'ROLE_ADMIN')"/>
		<security:intercept-url pattern="/portfolio/**"
			access="hasAnyRole('ROLE_USER', 'ROLE_OPER', 'ROLE_ADMIN')"/>
		<security:intercept-url pattern="/login" 
			access="isAnonymous()"/>
		<security:intercept-url pattern="/join" 
			access="isAnonymous()"/>
		<security:intercept-url pattern="/**"
			access="permitAll" />
		
		<security:form-login 
			login-page="/login"
			username-parameter="m_id" password-parameter="m_pw"
			login-processing-url="/login-processing"
			authentication-failure-handler-ref="customAuthenticationFailureHandler"
			authentication-success-handler-ref="customAuthenticationSuccessHandler"
			default-target-url="/login/authChk" />
		
		<security:logout logout-url="/logout"
			logout-success-url="/main" />

		<!-- 접근 권한이 없을 시 처리할 코드 (ex. 관리자가 아닐시 접속불가) -->
		<security:access-denied-handler
			error-page="/access-denied" />
		<!-- <security:access-denied-handler ref="userDeniedHandler" /> -->
		
		<!-- 세션 관리 -->
		<security:session-management>
			<!-- 동일 ID의 세션 최대 수가 한 개, 그 이상일 경우 기존 세션 무효화(로그아웃) -->
			<security:concurrency-control
				max-sessions="1" expired-url="/expired-login" />
		</security:session-management>

		<!-- ref는 bean의 id이다. -->
		<!-- 자동 로그인 관련 쿠키 저장, 세션이 종료된 후에도 자동 로그인할 수 있는 기능 86400 1일, 604800 7일 -->
		<!-- <remember-me key="userKey" token-validity-seconds="86400" /> -->
	</security:http>

	<!-- 사용자가 입력한 비밀번호를 암호화 시키고, 체크하는 로직이 포함됨 -->
	<security:authentication-manager
		id="normal">
		<security:authentication-provider
			ref="customAuthenticationProvider" />
		<security:authentication-provider
			user-service-ref="customUserDetailService" />
	</security:authentication-manager>

	<bean name="customAuthenticationProvider"
		class="com.jds.web.security.handler.CustomAuthenticationProvider" />
	<bean name="customUserDetailService"
		class="com.jds.web.security.service.CustomUserDetailService" />
	<bean name="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean name="customAuthenticationFailureHandler"
		class="com.jds.web.security.handler.CustomAuthenticationFailureHandler">
		<property name="m_id" value="m_id" />
		<property name="m_pw" value="m_pw" />
		<property name="errormsgname" value="errorMsg" />
		<property name="defaultFailUrl" value="/login" />
	</bean>
	<bean name="customAuthenticationSuccessHandler"
		class="com.jds.web.security.handler.CustomAuthenticationSuccesHandler">
		<property name="m_id" value="m_id" />
		<property name="defaultUrl" value="/login/authChk" />
	</bean>

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName"
			value="${db.driverclassname}" />
		<!-- DB 접속 정보를 설치한 것에 맞게 변경해 줘야 한다. -> 만약에 11g xe를 설치한 경우 -->
		<property name="jdbcUrl" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>

	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- DataSource -->
	<!-- <bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="${db.driverclassname}"/> <property 
		name="url" value="${db.url}"/> <property name="username" value="${db.username}"/> 
		<property name="password" value="${db.password}"/> </bean> -->

	<!-- JdbcTemplate -->
	<!-- <bean name="template" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource" ref="dataSource"/> </bean> -->

	<!-- SqlSession -->
	<bean name="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations"
			value="classpath:com/jds/web/mapper/security/*.xml" />
	</bean>

	<!-- SqlSessionTemplate -->
	<bean id="sqlSessoinTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory" />
	</bean>

	<!-- <bean name="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg index="0" ref="sqlSessionFactory"/> </bean> -->

	<context:component-scan
		base-package="com.jds.web.security" />

	<!-- <context:component-scan
		base-package="com.jds.web.security" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
	</context:component-scan> -->

</beans>